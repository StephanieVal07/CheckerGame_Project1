# [[file:checker.org::*questions][questions:1]]
# !/usr/bin/env python3
from easyAI import TwoPlayerGame, Human_Player, AI_Player, Negamax
from easyAI import solve_with_iterative_deepening
import numpy as np

"""
Assignment name: Project 1
Developer: Sebastian, Micaela
Architect: Tan, Michelle 
Reporter: Val, Stephanie

Professor: Dr. Marques
Due Date: 06/17/2022   
"""


# black_square
even = [0,2,4,6]
odd = [1,3,5,7]

# init
even_row = [(i,j) for i in even for j in odd]
odd_row = [(i,j) for i in odd for j in even]

black_squares = even_row + odd_row

class Checker(TwoPlayerGame):
    
    def __init__(self, players):
        self.players = players
        # self.board = np.arange(8 * 8).reshape(8,8)
        self.blank_board = np.zeros((8,8), dtype=object)
        self.board = self.blank_board.copy()
        self.black_pieces = [
            (0,1), (0,3), (0,5), (0,7),
            (1,0), (1,2), (1,4), (1,6)
        ]
        self.white_pieces = [
            (6,1), (6,3), (6,5), (6,7),
            (7,0), (7,2), (7,4), (7,6)
        ]
        for i,j in self.black_pieces:
            self.board[i,j] = "B"
        for i,j in self.white_pieces:
            self.board[i,j] = "W"

        self.white_territory = [(7,0), (7,2), (7,4), (7,6)] #FIRST ENTER WHITE PIECE TERRITORY
        self.black_territory = [(0,1), (0,3), (0,5), (0,7)]

        self.players[0].pos = self.white_pieces
        self.players[1].pos = self.black_pieces

        self.current_player = 1  # player 1 starts.

    def possible_moves_on_white_turn(self):
        table_pos = []
        old_new_piece_pos = []

        # board position before move
        board = self.blank_board.copy()
        for (p,l) in zip(self.players, ["W", "B"]):
            for x,y in p.pos:
                board[x,y] = l

        # get legal move of each pieces. (old piece location, new piece location)
        # get position of each move (list of all table position)
        for v in self.players[self.current_player-1].pos:
            old_piece_pos = v

            step_pos = [(v[0]-1, v[1]-1), (v[0]-1, v[1]+1)]
            # if no piece at step_pos, step
            # otherwise jump until no piece at next step_pos
            for n in step_pos:
                if (n[0] >= 0 and n[0] <= 7) and (n[1] >= 0 and n[1] <= 7) and (n in black_squares):
                    if board[n[0], n[1]] in ["B","W"]:
                        y = ((n[0] - old_piece_pos[0]) * 2) + old_piece_pos[0]
                        x = ((n[1] - old_piece_pos[1]) * 2) + old_piece_pos[1]
                        j = (y,x)
                        is_inside_board = (j[0] >= 0 and j[0] <= 7) and (j[1] >= 0 and j[1] <= 7)
                        if (j[0] <= 7) and (j[1] <=7):
                            is_position_empty = (board[j[0], j[1]] == 0)
                        else:
                            is_position_empty = False
                        if is_inside_board and (j in black_squares) and is_position_empty:
                            # print(old_piece_pos,j)
                            old_new_piece_pos.append((old_piece_pos,j))
                    else:
                        old_new_piece_pos.append((old_piece_pos,n))

        # board position after  move
        for i,j in old_new_piece_pos:
            print(f"i = {i}")
            b = board.copy()
            b[i[0], i[1]] = 0 # old position
            b[j[0], j[1]] = "W" # new position
            # print(b)
            table_pos.append(b)
            assert len(np.where(b != 0)[0]) == 16, f"In possible_moves_on_white_turn(), there are {len(np.where(b != 0)[0])} pieces on the board  \n {b}"


        self.board = board
        return table_pos

    def possible_moves_on_black_turn(self):
        table_pos = []
        old_new_piece_pos = []

        # board position before move
        board = self.blank_board.copy()
        for (p,l) in zip(self.players, ["W", "B"]):
            for x,y in p.pos:
                board[x,y] = l

        # get legal move of each pieces. (old piece location, new piece location)
        # get position of each move (list of all table position)
        for v in self.players[self.current_player-1].pos:
            old_piece_pos = v

            step_pos = [(v[0]+1, v[1]-1), (v[0]+1, v[1]+1)]
            # if no piece at step_pos, step
            # otherwise jump until no piece at next step_pos
            for n in step_pos:
                if (n[0] >= 0 and n[0] <= 7) and (n[1] >= 0 and n[1] <= 7) and (n in black_squares):
                    if board[n[0], n[1]] in ["B","W"]:
                        y = ((n[0] - old_piece_pos[0]) * 2) + old_piece_pos[0]
                        x = ((n[1] - old_piece_pos[1]) * 2) + old_piece_pos[1]
                        j = (y,x)
                        is_inside_board = (j[0] >= 0 and j[0] <= 7) and (j[1] >= 0 and j[1] <= 7)
                        if (j[0] <= 7) and (j[1] <=7):
                            is_position_empty = (board[j[0], j[1]] == 0)
                        else:
                            is_position_empty = False
                        if is_inside_board and (j in black_squares) and is_position_empty:
                            # print(old_piece_pos,j)
                            old_new_piece_pos.append((old_piece_pos,j))
                    else:
                        old_new_piece_pos.append((old_piece_pos,n))

        # board position after  move

        for i,j in old_new_piece_pos:
            b = board.copy()
            b[i[0], i[1]] = 0
            b[j[0], j[1]] = "B"
            table_pos.append(b)
            assert len(np.where(b != 0)[0]) == 16, f"In possible_moves_on_black_turn(), there are {len(np.where(b != 0)[0])} pieces on the board  \n {b}"
            #print(f"whats b = {b}")
        self.board = board
        return table_pos

    def possible_moves(self):
        """
        """

        if self.current_player == 2:
            return self.possible_moves_on_black_turn()
        else:
            return self.possible_moves_on_white_turn()

    def get_piece_pos_from_table(self, table_pos):
        if self.current_player-1 == 0:
            x = np.where(table_pos == "W")
        elif self.current_player-1 == 1:
            x = np.where(table_pos == "B")
        else:
            raise ValueError("There can be at most 2 players.\n")

        assert len(np.where(table_pos != 0)[0]) == 16, f"In get_piece_pos_from_table(), there are {len(np.where(table_pos != 0)[0])} pieces on the board  \n {table_pos}"
        return [(i,j) for i,j in zip(x[0], x[1])]

    def make_move(self, pos):
        """
        assign pieces index of pos array to current player position.

        parameters
        -------
        pos = position of all pieces on the (8 x 8) boards. type numpy array.

        example of pos
        [[0,?,0,B,0,B,0,B],-0  -->[(0,1), (0,3), (0,5), (0,7)] --> (0,1) gone
         [B,0,B,0,B,0,B,0], -1--> [(1,0), (1,2), (1,4), (1,6)]  --> (1,2) stay the same
         [0,-,0,B,0,-,0,-], -2 --< possible moves? [(2,1), (2,3), (2,5), (2,7)] ->(2,3)  added, 
         [-,0,-,0,-,0,-,0],-3 #empty [(3,0), (3,2), (3,4), (3,6)]
         [0,-,0,-,0,-,0,-], -4 #empty [(4,1), (4,3), (4,5), (4,7)]
         [-,0,-,0,-,0,-,0], -5 #empty [(5,0), (5,2), (5,4), (5,6)]
         [0,W,0,W,0,W,0,W], -6 --> [(6,1), (6,3), (6,5), (6,7)]
         [W,0,W,0,W,0,W,0]] -7 --> [(7,0), (7,2), (7,4), (7,6)]
         [0,1,2,3,4,5,6,7]
         
         black => [(2,1), (2,3), (2,5), (2,7),
                   (3,0), (3,2), (3,4), (3,6),
                   (4,1), (4,3), (4,5), (4,7),
                   (5,0), (5,2), (5,4), (5,6),
                   (6,1), (6,3), (6,5), (6,7),
                   (7,0), (7,2), (7,4), (7,6)]
         white => [(5,0), (5,2), (5,4), (5,6),
                   (4,1), (4,3), (4,5), (4,7),
                   (3,0), (3,2), (3,4), (3,6),
                   (2,1), (2,3), (2,5), (2,7),
                   (1,0), (1,2), (1,4), (1,6)
                   (0,1), (0,3), (0,5), (0,7)]
        ------
        """
        #return self.possible_moves_on_white_turn()
        # need to check whos turn it is 
        
        if self.current_player == 2: #if black players turn
           self.players[1].pos = self.get_piece_pos_from_table(pos)
           #when its player 2's turn we select/move a piece from the table, updating the positions 
           return self.players[1].pos
        else:    #if white players turn         
            self.players[0].pos = self.get_piece_pos_from_table(pos)
            #when its player 1's turn we select/move a piece from the table, updating the positions 
            return self.players[0].pos 
     
        #get_piece_pos_from_table(self, table_pos)
        #pass

    def lose(self):
        """
        black lose if white piece is in black territory
        white lose if black piece is in black territory
        """
        
        #try and check whos in whos territory
        
        #if B (player 2's positions) == anything in the list of white territory it should lose
        #maybe a for function to scan through the white territory for anything that == b
        # if b is found print indicator
        #white_territorycurren = [(7,0), (7,2), (7,4), (7,6)]
     
        if self.current_player == 2: #blacks turn
            common_B=0
            for value_1 in self.players[0].pos: #0 == white position
              j = value_1 
              #j should just find common value that is found in player whites position
              if value_1 in self.black_territory:
                print( j, "==", value_1) 
                #printing which value/element whites position and blacks territory have in common
                common_B=1 
                #will indicate if something is in common
            if(common_B):
                #print("The value they have in common is ", value_1)
                print("BLACK YOU LOSE....")
                print("CONGRATS, WHITE, YOU WON!")
                return True
            else:
                return False
        else: #whites turn
            common_W=0
            for value in self.players[1].pos: #1 == black position
                i = value 
                #i should just be the common value that is found in player blacks position
                if value in self.white_territory:
                    print( i, "==", value)
                    #printing which value/element blacks position and whites territory have in common
                    common_W=1
            if(common_W):
                #print("The value they have in common is ", value)
                print ("YOU LOST WHITE...... ")
                print("CONGRATS, BLACK, YOU WON!")
                return True
            else:
                return False
        #pass

    def is_over(self):
        """
        game is over immediately when one player get one of its piece into opponent's territory.
        """
        return (self.possible_moves() == []) or self.lose()
        #will return if there are no more possible moves or if a piece crossed the correct territory

    def show(self):
        """
        show 8*8 checker board.
        """

        # board position before move
        board = self.blank_board.copy()
        print(f"player 1 positions = {self.players[0].pos}")
        print(f"player 2 positions = {self.players[1].pos}")
        for (p,l) in zip(self.players, ["W", "B"]):
            for x,y in p.pos:
                board[x,y] = l
        print('\n')
        print(board)

    def scoring(self):
       """
       win = 0
       lose = -100
       """
       return -100 if self.lose() else 0

if __name__ == "__main__":
    ai = Negamax(1) # The AI will think 13 moves in advance
    game = Checker( [ AI_Player(ai), AI_Player(ai) ] )
    history = game.play()
# questions:1 ends here
